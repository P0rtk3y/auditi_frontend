{"version":3,"sources":["webpack://react-mic/webpack/universalModuleDefinition","webpack://react-mic/webpack/bootstrap","webpack://react-mic/external {\"root\":\"React\",\"commonjs2\":\"react\",\"commonjs\":\"react\",\"amd\":\"react\"}","webpack://react-mic/./src/libs/AudioContext.js","webpack://react-mic/./src/libs/MicrophoneRecorder.js","webpack://react-mic/./src/libs/AudioPlayer.js","webpack://react-mic/./src/libs/Visualizer.js","webpack://react-mic/./src/components/ReactMic.js","webpack://react-mic/./src/index.js"],"names":["root","factory","exports","module","require","define","amd","window","__WEBPACK_EXTERNAL_MODULE__0__","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","audioCtx","AudioContext","webkitAudioContext","analyser","createAnalyser","getAudioContext","getAnalyser","resetAnalyser","decodeAudioData","audioData","then","decodedData","mediaRecorder","chunks","startTime","stream","mediaOptions","onStartCallback","onStopCallback","onSaveCallback","onDataCallback","constraints","audio","video","navigator","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","MicrophoneRecorder","onStart","onStop","onSave","onData","options","_this","this","_classCallCheck","startRecording","Date","now","state","resume","start","createMediaStreamSource","connect","mediaDevices","console","log","str","MediaRecorder","isTypeSupported","mimeType","onstop","ondataavailable","event","push","data","alert","stopRecording","stop","getAudioTracks","forEach","track","evt","blob","Blob","type","blobObject","stopTime","blobURL","URL","createObjectURL","audioSource","AudioPlayer","audioElem","undefined","source","createMediaElementSource","destination","Visualizer","visualizeSineWave","canvasCtx","canvas","width","height","backgroundColor","strokeColor","bufferLength","fftSize","dataArray","Uint8Array","clearRect","draw","requestAnimationFrame","getByteTimeDomainData","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","sliceWidth","x","y","moveTo","lineTo","stroke","visualizeFrequencyBars","self","frequencyBinCount","getByteFrequencyData","barWidth","barHeight","hexToRgb","visualizeFrequencyCircles","reducedDataArray","sum","j","arc","Math","min","PI","fill","stepSize","length","hex","result","exec","parseInt","g","b","ReactMic","props","ReactMic_classCallCheck","_possibleConstructorReturn","_Component","visualize","_this$props","visualSetting","_this$state","microphoneRecorder","componentDidMount","_this2","_props","audioBitsPerSecond","refs","visualizer","getContext","setState","clear","_props2","render","_props3","record","_state","external_root_React_commonjs2_react_commonjs_react_amd_react_default","a","createElement","ref","className","Component","defaultProps","__webpack_exports__","ReactMic_ReactMic"],"mappings":"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","file":"react-mic.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"react-mic\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"react-mic\"] = factory(root[\"React\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE__0__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = __WEBPACK_EXTERNAL_MODULE__0__;","const audioCtx = new (window.AudioContext || window.webkitAudioContext)();\nlet analyser = audioCtx.createAnalyser();\n\nconst AudioContext  = {\n\n  getAudioContext() {\n    return audioCtx;\n  },\n\n  getAnalyser() {\n    return analyser;\n  },\n\n  resetAnalyser() {\n    analyser = audioCtx.createAnalyser();\n  },\n\n  decodeAudioData() {\n    audioCtx.decodeAudioData(audioData).then(function(decodedData) {\n      // use the decoded data here\n    });\n  }\n\n}\n\nexport default AudioContext;\n","import AudioContext from './AudioContext';\n\nlet analyser;\nlet audioCtx;\nlet mediaRecorder;\nlet chunks = [];\nlet startTime;\nlet stream;\nlet mediaOptions;\nlet blobObject;\nlet onStartCallback;\nlet onStopCallback;\nlet onSaveCallback;\nlet onDataCallback;\n\nconst constraints = { audio: true, video: false }; // constraints - only audio needed\n\nnavigator.getUserMedia = (navigator.getUserMedia ||\n                          navigator.webkitGetUserMedia ||\n                          navigator.mozGetUserMedia ||\n                          navigator.msGetUserMedia);\n\nexport class MicrophoneRecorder {\n  constructor(onStart, onStop, onSave, onData, options) {\n    onStartCallback= onStart;\n    onStopCallback= onStop;\n    onSaveCallback = onSave;\n    onDataCallback = onData;\n    mediaOptions= options;\n  }\n\n  startRecording=() => {\n\n    startTime = Date.now();\n\n    if(mediaRecorder) {\n\n      if(audioCtx && audioCtx.state === 'suspended') {\n        audioCtx.resume();\n      }\n\n      if(mediaRecorder && mediaRecorder.state === 'paused') {\n        mediaRecorder.resume();\n        return;\n      }\n\n      if(audioCtx && mediaRecorder && mediaRecorder.state === 'inactive') {\n        mediaRecorder.start(10);\n        const source = audioCtx.createMediaStreamSource(stream);\n        source.connect(analyser);\n        if(onStartCallback) { onStartCallback() };\n      }\n    } else {\n      if (navigator.mediaDevices) {\n        console.log('getUserMedia supported.');\n\n        navigator.mediaDevices.getUserMedia(constraints)\n          .then((str) => {\n            stream = str;\n\n            if(MediaRecorder.isTypeSupported(mediaOptions.mimeType)) {\n              mediaRecorder = new MediaRecorder(str, mediaOptions);\n            } else {\n              mediaRecorder = new MediaRecorder(str);\n            }\n\n            if(onStartCallback) { onStartCallback() };\n\n            mediaRecorder.onstop = this.onStop;\n            mediaRecorder.ondataavailable = (event) => {\n              chunks.push(event.data);\n              if(onDataCallback) {\n                onDataCallback(event.data);\n              }\n            }\n\n            audioCtx = AudioContext.getAudioContext();\n            audioCtx.resume().then(() => {\n\n              analyser = AudioContext.getAnalyser();\n              mediaRecorder.start(10);\n              const sourceNode = audioCtx.createMediaStreamSource(stream);\n              sourceNode.connect(analyser);\n            });\n\n          });\n\n      } else {\n        alert('Your browser does not support audio recording');\n      }\n    }\n\n  }\n\n  stopRecording() {\n    if(mediaRecorder && mediaRecorder.state !== 'inactive') {\n      mediaRecorder.stop();\n\n      stream.getAudioTracks().forEach((track) => {\n        track.stop()\n      })\n      mediaRecorder = null\n      AudioContext.resetAnalyser();\n    }\n  }\n\n  onStop(evt) {\n    const blob = new Blob(chunks, { 'type' : mediaOptions.mimeType });\n    chunks = [];\n\n    const blobObject =  {\n      blob      : blob,\n      startTime : startTime,\n      stopTime  : Date.now(),\n      options   : mediaOptions,\n      blobURL   : window.URL.createObjectURL(blob)\n    }\n\n    if(onStopCallback) { onStopCallback(blobObject) };\n    if(onSaveCallback) { onSaveCallback(blobObject) };\n  }\n\n}\n","import AudioContext from './AudioContext';\n\nlet audioSource;\n\nconst AudioPlayer =  {\n\n  create(audioElem) {\n    const audioCtx = AudioContext.getAudioContext();\n    const analyser = AudioContext.getAnalyser();\n\n    if(audioSource === undefined){\n      const source = audioCtx.createMediaElementSource(audioElem);\n      source.connect(analyser);\n      audioSource = source;\n    }\n\n    analyser.connect(audioCtx.destination);\n  }\n\n}\n\nexport default AudioPlayer;","import AudioContext from './AudioContext';\n\n\nlet drawVisual;\n\nconst Visualizer = {\n\n  visualizeSineWave(canvasCtx, canvas, width, height, backgroundColor, strokeColor) {\n    let analyser = AudioContext.getAnalyser();\n\n    const bufferLength = analyser.fftSize;\n    const dataArray = new Uint8Array(bufferLength);\n\n    canvasCtx.clearRect(0, 0, width, height);\n\n    function draw() {\n\n      drawVisual = requestAnimationFrame(draw);\n\n      analyser = AudioContext.getAnalyser();\n\n      analyser.getByteTimeDomainData(dataArray);\n\n      canvasCtx.fillStyle = backgroundColor;\n      canvasCtx.fillRect(0, 0, width, height);\n\n      canvasCtx.lineWidth = 2;\n      canvasCtx.strokeStyle = strokeColor;\n\n      canvasCtx.beginPath();\n\n      const sliceWidth = width * 1.0 / bufferLength;\n      let x = 0;\n\n      for(let i = 0; i < bufferLength; i++) {\n        const v = dataArray[i] / 128.0;\n        const y = v * height/2;\n\n        if(i === 0) {\n          canvasCtx.moveTo(x, y);\n        } else {\n          canvasCtx.lineTo(x, y);\n        }\n\n        x += sliceWidth;\n      }\n\n      canvasCtx.lineTo(canvas.width, canvas.height/2);\n      canvasCtx.stroke();\n    };\n\n    draw();\n  },\n\n  visualizeFrequencyBars(canvasCtx, canvas, width, height, backgroundColor, strokeColor) {\n    const self = this;\n    let analyser = AudioContext.getAnalyser();\n    analyser.fftSize = 256;\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n\n    canvasCtx.clearRect(0, 0, width, height);\n\n    function draw() {\n      drawVisual = requestAnimationFrame(draw);\n\n      analyser = AudioContext.getAnalyser();\n      analyser.getByteFrequencyData(dataArray);\n\n      canvasCtx.fillStyle = backgroundColor;\n      canvasCtx.fillRect(0, 0, width, height);\n\n      const barWidth = (width / bufferLength) * 2.5;\n      let barHeight;\n      let x = 0;\n\n      for(let i = 0; i < bufferLength; i++) {\n        barHeight = dataArray[i];\n\n        const rgb = self.hexToRgb(strokeColor);\n\n        // canvasCtx.fillStyle = `rgb(${barHeight+100},${rgb.g},${rgb.b})`;\n        canvasCtx.fillStyle = strokeColor;\n        canvasCtx.fillRect(x,height-barHeight/2,barWidth,barHeight/2);\n\n        x += barWidth + 1;\n      }\n    };\n\n    draw();\n  },\n\n  visualizeFrequencyCircles(canvasCtx, canvas, width, height, backgroundColor, strokeColor) {\n    const self = this;\n    let analyser = AudioContext.getAnalyser();\n    analyser.fftSize = 32;\n    const bufferLength = analyser.frequencyBinCount;\n\n    const dataArray = new Uint8Array(bufferLength);\n    canvasCtx.clearRect(0, 0, width, height);\n\n    function draw() {\n\n      drawVisual = requestAnimationFrame(draw);\n      analyser = AudioContext.getAnalyser();\n      analyser.getByteFrequencyData(dataArray);\n      const reductionAmount = 3;\n      const reducedDataArray = new Uint8Array(bufferLength / reductionAmount);\n\n      for (let i = 0; i < bufferLength; i += reductionAmount) {\n        let sum = 0;\n        for (let j = 0; j < reductionAmount; j++) {\n          sum += dataArray[i + j];\n        }\n         reducedDataArray[i/reductionAmount] = sum / reductionAmount;\n      }\n\n      canvasCtx.clearRect(0, 0, width, height);\n      canvasCtx.beginPath();\n      canvasCtx.arc(width / 2, height / 2, Math.min(height, width) / 2, 0, 2 * Math.PI);\n      canvasCtx.fillStyle = backgroundColor;\n      canvasCtx.fill();\n      const stepSize = (Math.min(height, width) / 2.0) / (reducedDataArray.length);\n      canvasCtx.strokeStyle = strokeColor;\n\n      for (let i = 0; i < reducedDataArray.length; i++) {\n        canvasCtx.beginPath();\n        const normalized = reducedDataArray[i] / 128;\n        const r = (stepSize * i) + (stepSize * normalized);\n        canvasCtx.arc(width / 2, height / 2, r, 0, 2 * Math.PI);\n        canvasCtx.stroke();\n      }\n    };\n    draw();\n  },\n\n\n  hexToRgb(hex) {\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n  }\n\n}\n\nexport default Visualizer;\n","// cool blog article on how to do this: http://www.smartjava.org/content/exploring-html5-web-audio-visualizing-sound\n// https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Visualizations_with_Web_Audio_API\n\n// distortion curve for the waveshaper, thanks to Kevin Ennis\n// http://stackoverflow.com/questions/22312841/waveshaper-node-in-webaudio-how-to-emulate-distortion\n\nimport React, { Component }   from 'react'\nimport { string, number, bool, func } from 'prop-types';\nimport { MicrophoneRecorder } from '../libs/MicrophoneRecorder';\nimport AudioContext           from '../libs/AudioContext';\nimport AudioPlayer            from '../libs/AudioPlayer';\nimport Visualizer             from '../libs/Visualizer';\n\n\nexport default class ReactMic extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      microphoneRecorder  : null,\n      canvas              : null,\n      canvasCtx           : null\n    }\n  }\n\n  componentDidMount() {\n    const {\n      onSave,\n      onStop,\n      onStart,\n      onData,\n      audioElem,\n      audioBitsPerSecond,\n      mimeType\n    } = this.props;\n    const { visualizer } = this.refs;\n    const canvas = visualizer;\n    const canvasCtx = canvas.getContext(\"2d\");\n    const options = {\n      audioBitsPerSecond : audioBitsPerSecond,\n      mimeType           : mimeType\n    }\n\n    if(audioElem) {\n      AudioPlayer.create(audioElem);\n\n      this.setState({\n        canvas: canvas,\n        canvasCtx: canvasCtx\n      }, () => {\n        this.visualize();\n      });\n    } else {\n\n      this.setState({\n        microphoneRecorder: new MicrophoneRecorder(\n                              onStart,\n                              onStop,\n                              onSave,\n                              onData,\n                              options\n                            ),\n        canvas: canvas,\n        canvasCtx: canvasCtx\n      }, () => {\n        this.visualize();\n      });\n    }\n\n  }\n\n  visualize = () => {\n    const self = this;\n    const { backgroundColor, strokeColor, width, height, visualSetting } = this.props;\n    const { canvas, canvasCtx } = this.state;\n\n    if(visualSetting === 'sinewave') {\n      Visualizer.visualizeSineWave(canvasCtx, canvas, width, height, backgroundColor, strokeColor);\n    } else if(visualSetting === 'frequencyBars') {\n      Visualizer.visualizeFrequencyBars(canvasCtx, canvas, width, height, backgroundColor, strokeColor);\n    } else if(visualSetting === 'frequencyCircles') {\n      Visualizer.visualizeFrequencyCircles(canvasCtx, canvas, width, height, backgroundColor, strokeColor);\n    }\n\n  }\n\n  clear() {\n    const { width, height } = this.props;\n    const { canvasCtx  } = this.state;\n    canvasCtx.clearRect(0, 0, width, height);\n  }\n\n  render() {\n    const { record, onStop, width, height } = this.props;\n    const { microphoneRecorder, canvasCtx } = this.state;\n\n    if(record) {\n      if(microphoneRecorder) {\n        microphoneRecorder.startRecording();\n\n      }\n    } else {\n      if (microphoneRecorder) {\n        microphoneRecorder.stopRecording(onStop);\n        this.clear();\n      }\n    }\n\n    return (<canvas ref=\"visualizer\" height={height} width={width} className={this.props.className}></canvas>);\n  }\n}\n\nReactMic.propTypes = {\n  backgroundColor : string,\n  strokeColor     : string,\n  className       : string,\n  audioBitsPerSecond: number,\n  mimeType        : string,\n  height          : number,\n  record          : bool.isRequired,\n  onStop          : func,\n  onData          : func\n};\n\nReactMic.defaultProps = {\n  backgroundColor   : 'rgba(255, 255, 255, 0.5)',\n  strokeColor       : '#000000',\n  className         : 'visualizer',\n  audioBitsPerSecond: 128000,\n  mimeType          : 'audio/webm;codecs=opus',\n  record            : false,\n  width             : 640,\n  height            : 100,\n  visualSetting     : 'sinewave'\n}\n","import ReactMic from './components/ReactMic';\n\nexport { ReactMic };\n"],"sourceRoot":""}