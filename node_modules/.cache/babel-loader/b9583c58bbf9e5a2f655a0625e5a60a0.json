{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n} // cool blog article on how to do this: http://www.smartjava.org/content/exploring-html5-web-audio-visualizing-sound\n// https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Visualizations_with_Web_Audio_API\n// distortion curve for the waveshaper, thanks to Kevin Ennis\n// http://stackoverflow.com/questions/22312841/waveshaper-node-in-webaudio-how-to-emulate-distortion\n\n\nimport React, { Component } from 'react';\nimport { string, number, bool, func } from 'prop-types';\nimport { MicrophoneRecorder } from '../libs/MicrophoneRecorder';\nimport AudioContext from '../libs/AudioContext';\nimport AudioPlayer from '../libs/AudioPlayer';\nimport Visualizer from '../libs/Visualizer';\n\nvar ReactMic = function (_Component) {\n  _inherits(ReactMic, _Component);\n\n  function ReactMic(props) {\n    _classCallCheck(this, ReactMic);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.visualize = function () {\n      var self = _this;\n      var _this$props = _this.props,\n          backgroundColor = _this$props.backgroundColor,\n          strokeColor = _this$props.strokeColor,\n          width = _this$props.width,\n          height = _this$props.height,\n          visualSetting = _this$props.visualSetting;\n      var _this$state = _this.state,\n          canvas = _this$state.canvas,\n          canvasCtx = _this$state.canvasCtx;\n\n      if (visualSetting === 'sinewave') {\n        Visualizer.visualizeSineWave(canvasCtx, canvas, width, height, backgroundColor, strokeColor);\n      } else if (visualSetting === 'frequencyBars') {\n        Visualizer.visualizeFrequencyBars(canvasCtx, canvas, width, height, backgroundColor, strokeColor);\n      } else if (visualSetting === 'frequencyCircles') {\n        Visualizer.visualizeFrequencyCircles(canvasCtx, canvas, width, height, backgroundColor, strokeColor);\n      }\n    };\n\n    _this.state = {\n      microphoneRecorder: null,\n      canvas: null,\n      canvasCtx: null\n    };\n    return _this;\n  }\n\n  ReactMic.prototype.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    var _props = this.props,\n        onSave = _props.onSave,\n        onStop = _props.onStop,\n        onStart = _props.onStart,\n        onData = _props.onData,\n        audioElem = _props.audioElem,\n        audioBitsPerSecond = _props.audioBitsPerSecond,\n        mimeType = _props.mimeType;\n    var visualizer = this.refs.visualizer;\n    var canvas = visualizer;\n    var canvasCtx = canvas.getContext(\"2d\");\n    var options = {\n      audioBitsPerSecond: audioBitsPerSecond,\n      mimeType: mimeType\n    };\n\n    if (audioElem) {\n      AudioPlayer.create(audioElem);\n      this.setState({\n        canvas: canvas,\n        canvasCtx: canvasCtx\n      }, function () {\n        _this2.visualize();\n      });\n    } else {\n      this.setState({\n        microphoneRecorder: new MicrophoneRecorder(onStart, onStop, onSave, onData, options),\n        canvas: canvas,\n        canvasCtx: canvasCtx\n      }, function () {\n        _this2.visualize();\n      });\n    }\n  };\n\n  ReactMic.prototype.clear = function clear() {\n    var _props2 = this.props,\n        width = _props2.width,\n        height = _props2.height;\n    var canvasCtx = this.state.canvasCtx;\n    canvasCtx.clearRect(0, 0, width, height);\n  };\n\n  ReactMic.prototype.render = function render() {\n    var _props3 = this.props,\n        record = _props3.record,\n        onStop = _props3.onStop,\n        width = _props3.width,\n        height = _props3.height;\n    var _state = this.state,\n        microphoneRecorder = _state.microphoneRecorder,\n        canvasCtx = _state.canvasCtx;\n\n    if (record) {\n      if (microphoneRecorder) {\n        microphoneRecorder.startRecording();\n      }\n    } else {\n      if (microphoneRecorder) {\n        microphoneRecorder.stopRecording(onStop);\n        this.clear();\n      }\n    }\n\n    return React.createElement('canvas', {\n      ref: 'visualizer',\n      height: height,\n      width: width,\n      className: this.props.className\n    });\n  };\n\n  return ReactMic;\n}(Component);\n\nexport { ReactMic as default };\nReactMic.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  backgroundColor: string,\n  strokeColor: string,\n  className: string,\n  audioBitsPerSecond: number,\n  mimeType: string,\n  height: number,\n  record: bool.isRequired,\n  onStop: func,\n  onData: func\n} : {};\nReactMic.defaultProps = {\n  backgroundColor: 'rgba(255, 255, 255, 0.5)',\n  strokeColor: '#000000',\n  className: 'visualizer',\n  audioBitsPerSecond: 128000,\n  mimeType: 'audio/webm;codecs=opus',\n  record: false,\n  width: 640,\n  height: 100,\n  visualSetting: 'sinewave'\n};","map":{"version":3,"sources":["/Users/skout/Desktop/Auditi/auditi_frontend/node_modules/react-mic/es/components/ReactMic.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","React","Component","string","number","bool","func","MicrophoneRecorder","AudioContext","AudioPlayer","Visualizer","ReactMic","_Component","props","_this","visualize","_this$props","backgroundColor","strokeColor","width","height","visualSetting","_this$state","state","canvas","canvasCtx","visualizeSineWave","visualizeFrequencyBars","visualizeFrequencyCircles","microphoneRecorder","componentDidMount","_this2","_props","onSave","onStop","onStart","onData","audioElem","audioBitsPerSecond","mimeType","visualizer","refs","getContext","options","setState","clear","_props2","clearRect","render","_props3","record","_state","startRecording","stopRecording","createElement","ref","className","default","propTypes","process","env","NODE_ENV","isRequired","defaultProps"],"mappings":"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","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// cool blog article on how to do this: http://www.smartjava.org/content/exploring-html5-web-audio-visualizing-sound\n// https://developer.mozilla.org/en-US/docs/Web/API/Web_Audio_API/Visualizations_with_Web_Audio_API\n\n// distortion curve for the waveshaper, thanks to Kevin Ennis\n// http://stackoverflow.com/questions/22312841/waveshaper-node-in-webaudio-how-to-emulate-distortion\n\nimport React, { Component } from 'react';\nimport { string, number, bool, func } from 'prop-types';\nimport { MicrophoneRecorder } from '../libs/MicrophoneRecorder';\nimport AudioContext from '../libs/AudioContext';\nimport AudioPlayer from '../libs/AudioPlayer';\nimport Visualizer from '../libs/Visualizer';\n\nvar ReactMic = function (_Component) {\n  _inherits(ReactMic, _Component);\n\n  function ReactMic(props) {\n    _classCallCheck(this, ReactMic);\n\n    var _this = _possibleConstructorReturn(this, _Component.call(this, props));\n\n    _this.visualize = function () {\n      var self = _this;\n      var _this$props = _this.props,\n          backgroundColor = _this$props.backgroundColor,\n          strokeColor = _this$props.strokeColor,\n          width = _this$props.width,\n          height = _this$props.height,\n          visualSetting = _this$props.visualSetting;\n      var _this$state = _this.state,\n          canvas = _this$state.canvas,\n          canvasCtx = _this$state.canvasCtx;\n\n\n      if (visualSetting === 'sinewave') {\n        Visualizer.visualizeSineWave(canvasCtx, canvas, width, height, backgroundColor, strokeColor);\n      } else if (visualSetting === 'frequencyBars') {\n        Visualizer.visualizeFrequencyBars(canvasCtx, canvas, width, height, backgroundColor, strokeColor);\n      } else if (visualSetting === 'frequencyCircles') {\n        Visualizer.visualizeFrequencyCircles(canvasCtx, canvas, width, height, backgroundColor, strokeColor);\n      }\n    };\n\n    _this.state = {\n      microphoneRecorder: null,\n      canvas: null,\n      canvasCtx: null\n    };\n    return _this;\n  }\n\n  ReactMic.prototype.componentDidMount = function componentDidMount() {\n    var _this2 = this;\n\n    var _props = this.props,\n        onSave = _props.onSave,\n        onStop = _props.onStop,\n        onStart = _props.onStart,\n        onData = _props.onData,\n        audioElem = _props.audioElem,\n        audioBitsPerSecond = _props.audioBitsPerSecond,\n        mimeType = _props.mimeType;\n    var visualizer = this.refs.visualizer;\n\n    var canvas = visualizer;\n    var canvasCtx = canvas.getContext(\"2d\");\n    var options = {\n      audioBitsPerSecond: audioBitsPerSecond,\n      mimeType: mimeType\n    };\n\n    if (audioElem) {\n      AudioPlayer.create(audioElem);\n\n      this.setState({\n        canvas: canvas,\n        canvasCtx: canvasCtx\n      }, function () {\n        _this2.visualize();\n      });\n    } else {\n\n      this.setState({\n        microphoneRecorder: new MicrophoneRecorder(onStart, onStop, onSave, onData, options),\n        canvas: canvas,\n        canvasCtx: canvasCtx\n      }, function () {\n        _this2.visualize();\n      });\n    }\n  };\n\n  ReactMic.prototype.clear = function clear() {\n    var _props2 = this.props,\n        width = _props2.width,\n        height = _props2.height;\n    var canvasCtx = this.state.canvasCtx;\n\n    canvasCtx.clearRect(0, 0, width, height);\n  };\n\n  ReactMic.prototype.render = function render() {\n    var _props3 = this.props,\n        record = _props3.record,\n        onStop = _props3.onStop,\n        width = _props3.width,\n        height = _props3.height;\n    var _state = this.state,\n        microphoneRecorder = _state.microphoneRecorder,\n        canvasCtx = _state.canvasCtx;\n\n\n    if (record) {\n      if (microphoneRecorder) {\n        microphoneRecorder.startRecording();\n      }\n    } else {\n      if (microphoneRecorder) {\n        microphoneRecorder.stopRecording(onStop);\n        this.clear();\n      }\n    }\n\n    return React.createElement('canvas', { ref: 'visualizer', height: height, width: width, className: this.props.className });\n  };\n\n  return ReactMic;\n}(Component);\n\nexport { ReactMic as default };\n\n\nReactMic.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  backgroundColor: string,\n  strokeColor: string,\n  className: string,\n  audioBitsPerSecond: number,\n  mimeType: string,\n  height: number,\n  record: bool.isRequired,\n  onStop: func,\n  onData: func\n} : {};\n\nReactMic.defaultProps = {\n  backgroundColor: 'rgba(255, 255, 255, 0.5)',\n  strokeColor: '#000000',\n  className: 'visualizer',\n  audioBitsPerSecond: 128000,\n  mimeType: 'audio/webm;codecs=opus',\n  record: false,\n  width: 640,\n  height: 100,\n  visualSetting: 'sinewave'\n};"]},"metadata":{},"sourceType":"module"}