{"ast":null,"code":"import AudioContext from './AudioContext';\nvar drawVisual = void 0;\nvar Visualizer = {\n  visualizeSineWave: function visualizeSineWave(canvasCtx, canvas, width, height, backgroundColor, strokeColor) {\n    var analyser = AudioContext.getAnalyser();\n    var bufferLength = analyser.fftSize;\n    var dataArray = new Uint8Array(bufferLength);\n    canvasCtx.clearRect(0, 0, width, height);\n\n    function draw() {\n      drawVisual = requestAnimationFrame(draw);\n      analyser = AudioContext.getAnalyser();\n      analyser.getByteTimeDomainData(dataArray);\n      canvasCtx.fillStyle = backgroundColor;\n      canvasCtx.fillRect(0, 0, width, height);\n      canvasCtx.lineWidth = 2;\n      canvasCtx.strokeStyle = strokeColor;\n      canvasCtx.beginPath();\n      var sliceWidth = width * 1.0 / bufferLength;\n      var x = 0;\n\n      for (var i = 0; i < bufferLength; i++) {\n        var v = dataArray[i] / 128.0;\n        var y = v * height / 2;\n\n        if (i === 0) {\n          canvasCtx.moveTo(x, y);\n        } else {\n          canvasCtx.lineTo(x, y);\n        }\n\n        x += sliceWidth;\n      }\n\n      canvasCtx.lineTo(canvas.width, canvas.height / 2);\n      canvasCtx.stroke();\n    }\n\n    ;\n    draw();\n  },\n  visualizeFrequencyBars: function visualizeFrequencyBars(canvasCtx, canvas, width, height, backgroundColor, strokeColor) {\n    var self = this;\n    var analyser = AudioContext.getAnalyser();\n    analyser.fftSize = 256;\n    var bufferLength = analyser.frequencyBinCount;\n    var dataArray = new Uint8Array(bufferLength);\n    canvasCtx.clearRect(0, 0, width, height);\n\n    function draw() {\n      drawVisual = requestAnimationFrame(draw);\n      analyser = AudioContext.getAnalyser();\n      analyser.getByteFrequencyData(dataArray);\n      canvasCtx.fillStyle = backgroundColor;\n      canvasCtx.fillRect(0, 0, width, height);\n      var barWidth = width / bufferLength * 2.5;\n      var barHeight = void 0;\n      var x = 0;\n\n      for (var i = 0; i < bufferLength; i++) {\n        barHeight = dataArray[i];\n        var rgb = self.hexToRgb(strokeColor); // canvasCtx.fillStyle = `rgb(${barHeight+100},${rgb.g},${rgb.b})`;\n\n        canvasCtx.fillStyle = strokeColor;\n        canvasCtx.fillRect(x, height - barHeight / 2, barWidth, barHeight / 2);\n        x += barWidth + 1;\n      }\n    }\n\n    ;\n    draw();\n  },\n  visualizeFrequencyCircles: function visualizeFrequencyCircles(canvasCtx, canvas, width, height, backgroundColor, strokeColor) {\n    var self = this;\n    var analyser = AudioContext.getAnalyser();\n    analyser.fftSize = 32;\n    var bufferLength = analyser.frequencyBinCount;\n    var dataArray = new Uint8Array(bufferLength);\n    canvasCtx.clearRect(0, 0, width, height);\n\n    function draw() {\n      drawVisual = requestAnimationFrame(draw);\n      analyser = AudioContext.getAnalyser();\n      analyser.getByteFrequencyData(dataArray);\n      var reductionAmount = 3;\n      var reducedDataArray = new Uint8Array(bufferLength / reductionAmount);\n\n      for (var i = 0; i < bufferLength; i += reductionAmount) {\n        var sum = 0;\n\n        for (var j = 0; j < reductionAmount; j++) {\n          sum += dataArray[i + j];\n        }\n\n        reducedDataArray[i / reductionAmount] = sum / reductionAmount;\n      }\n\n      canvasCtx.clearRect(0, 0, width, height);\n      canvasCtx.beginPath();\n      canvasCtx.arc(width / 2, height / 2, Math.min(height, width) / 2, 0, 2 * Math.PI);\n      canvasCtx.fillStyle = backgroundColor;\n      canvasCtx.fill();\n      var stepSize = Math.min(height, width) / 2.0 / reducedDataArray.length;\n      canvasCtx.strokeStyle = strokeColor;\n\n      for (var _i = 0; _i < reducedDataArray.length; _i++) {\n        canvasCtx.beginPath();\n        var normalized = reducedDataArray[_i] / 128;\n        var r = stepSize * _i + stepSize * normalized;\n        canvasCtx.arc(width / 2, height / 2, r, 0, 2 * Math.PI);\n        canvasCtx.stroke();\n      }\n    }\n\n    ;\n    draw();\n  },\n  hexToRgb: function hexToRgb(hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n  }\n};\nexport default Visualizer;","map":{"version":3,"sources":["/Users/skout/Desktop/Auditi/auditi_frontend/node_modules/react-mic/es/libs/Visualizer.js"],"names":["AudioContext","drawVisual","Visualizer","visualizeSineWave","canvasCtx","canvas","width","height","backgroundColor","strokeColor","analyser","getAnalyser","bufferLength","fftSize","dataArray","Uint8Array","clearRect","draw","requestAnimationFrame","getByteTimeDomainData","fillStyle","fillRect","lineWidth","strokeStyle","beginPath","sliceWidth","x","i","v","y","moveTo","lineTo","stroke","visualizeFrequencyBars","self","frequencyBinCount","getByteFrequencyData","barWidth","barHeight","rgb","hexToRgb","visualizeFrequencyCircles","reductionAmount","reducedDataArray","sum","j","arc","Math","min","PI","fill","stepSize","length","_i","normalized","r","hex","result","exec","parseInt","g","b"],"mappings":"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","sourcesContent":["import AudioContext from './AudioContext';\n\nvar drawVisual = void 0;\n\nvar Visualizer = {\n  visualizeSineWave: function visualizeSineWave(canvasCtx, canvas, width, height, backgroundColor, strokeColor) {\n    var analyser = AudioContext.getAnalyser();\n\n    var bufferLength = analyser.fftSize;\n    var dataArray = new Uint8Array(bufferLength);\n\n    canvasCtx.clearRect(0, 0, width, height);\n\n    function draw() {\n\n      drawVisual = requestAnimationFrame(draw);\n\n      analyser = AudioContext.getAnalyser();\n\n      analyser.getByteTimeDomainData(dataArray);\n\n      canvasCtx.fillStyle = backgroundColor;\n      canvasCtx.fillRect(0, 0, width, height);\n\n      canvasCtx.lineWidth = 2;\n      canvasCtx.strokeStyle = strokeColor;\n\n      canvasCtx.beginPath();\n\n      var sliceWidth = width * 1.0 / bufferLength;\n      var x = 0;\n\n      for (var i = 0; i < bufferLength; i++) {\n        var v = dataArray[i] / 128.0;\n        var y = v * height / 2;\n\n        if (i === 0) {\n          canvasCtx.moveTo(x, y);\n        } else {\n          canvasCtx.lineTo(x, y);\n        }\n\n        x += sliceWidth;\n      }\n\n      canvasCtx.lineTo(canvas.width, canvas.height / 2);\n      canvasCtx.stroke();\n    };\n\n    draw();\n  },\n  visualizeFrequencyBars: function visualizeFrequencyBars(canvasCtx, canvas, width, height, backgroundColor, strokeColor) {\n    var self = this;\n    var analyser = AudioContext.getAnalyser();\n    analyser.fftSize = 256;\n    var bufferLength = analyser.frequencyBinCount;\n    var dataArray = new Uint8Array(bufferLength);\n\n    canvasCtx.clearRect(0, 0, width, height);\n\n    function draw() {\n      drawVisual = requestAnimationFrame(draw);\n\n      analyser = AudioContext.getAnalyser();\n      analyser.getByteFrequencyData(dataArray);\n\n      canvasCtx.fillStyle = backgroundColor;\n      canvasCtx.fillRect(0, 0, width, height);\n\n      var barWidth = width / bufferLength * 2.5;\n      var barHeight = void 0;\n      var x = 0;\n\n      for (var i = 0; i < bufferLength; i++) {\n        barHeight = dataArray[i];\n\n        var rgb = self.hexToRgb(strokeColor);\n\n        // canvasCtx.fillStyle = `rgb(${barHeight+100},${rgb.g},${rgb.b})`;\n        canvasCtx.fillStyle = strokeColor;\n        canvasCtx.fillRect(x, height - barHeight / 2, barWidth, barHeight / 2);\n\n        x += barWidth + 1;\n      }\n    };\n\n    draw();\n  },\n  visualizeFrequencyCircles: function visualizeFrequencyCircles(canvasCtx, canvas, width, height, backgroundColor, strokeColor) {\n    var self = this;\n    var analyser = AudioContext.getAnalyser();\n    analyser.fftSize = 32;\n    var bufferLength = analyser.frequencyBinCount;\n\n    var dataArray = new Uint8Array(bufferLength);\n    canvasCtx.clearRect(0, 0, width, height);\n\n    function draw() {\n\n      drawVisual = requestAnimationFrame(draw);\n      analyser = AudioContext.getAnalyser();\n      analyser.getByteFrequencyData(dataArray);\n      var reductionAmount = 3;\n      var reducedDataArray = new Uint8Array(bufferLength / reductionAmount);\n\n      for (var i = 0; i < bufferLength; i += reductionAmount) {\n        var sum = 0;\n        for (var j = 0; j < reductionAmount; j++) {\n          sum += dataArray[i + j];\n        }\n        reducedDataArray[i / reductionAmount] = sum / reductionAmount;\n      }\n\n      canvasCtx.clearRect(0, 0, width, height);\n      canvasCtx.beginPath();\n      canvasCtx.arc(width / 2, height / 2, Math.min(height, width) / 2, 0, 2 * Math.PI);\n      canvasCtx.fillStyle = backgroundColor;\n      canvasCtx.fill();\n      var stepSize = Math.min(height, width) / 2.0 / reducedDataArray.length;\n      canvasCtx.strokeStyle = strokeColor;\n\n      for (var _i = 0; _i < reducedDataArray.length; _i++) {\n        canvasCtx.beginPath();\n        var normalized = reducedDataArray[_i] / 128;\n        var r = stepSize * _i + stepSize * normalized;\n        canvasCtx.arc(width / 2, height / 2, r, 0, 2 * Math.PI);\n        canvasCtx.stroke();\n      }\n    };\n    draw();\n  },\n  hexToRgb: function hexToRgb(hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n      r: parseInt(result[1], 16),\n      g: parseInt(result[2], 16),\n      b: parseInt(result[3], 16)\n    } : null;\n  }\n};\n\nexport default Visualizer;"]},"metadata":{},"sourceType":"module"}