{"ast":null,"code":"import _isObject from \"lodash/isObject\";\nimport * as _prettier from 'prettier/standalone';\nimport babylon from 'prettier/parser-babylon';\nimport html from 'prettier/parser-html';\nimport typescript from 'prettier/parser-typescript'; // `prettier` is a CJS library, there are known issues with them:\n// https://github.com/rollup/rollup/issues/1267#issuecomment-446681320\n\nvar prettier = _prettier.default || _prettier;\nvar prettierConfig = {\n  htmlWhitespaceSensitivity: 'ignore',\n  printWidth: 100,\n  tabWidth: 2,\n  semi: false,\n  singleQuote: true,\n  trailingComma: 'all',\n  plugins: {\n    babylon: babylon,\n    html: html,\n    typescript: typescript\n  }\n};\n\nvar normalizeToString = function normalizeToString(value) {\n  if (Array.isArray(value)) return value.join('\\n');\n  return _isObject(value) ? JSON.stringify(value, null, 2) : value;\n};\n\nexport var prettifyCode = function prettifyCode(code, parser) {\n  var formatted = prettier.format(code, Object.assign({}, prettierConfig, {\n    // a narrower print width is more friendly to doc examples\n    parser: parser\n  }));\n  return formatted.replace(/^;</m, '<'); // remove beginning semi in JSX/HTML\n};\nvar formatters = {\n  bash: function bash() {\n    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return val.replace(/^/g, '$  ');\n  },\n  json: function json(val) {\n    return prettifyCode(val, 'json');\n  },\n  js: function js() {\n    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return prettifyCode(val, 'babel');\n  },\n  jsx: function jsx() {\n    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return prettifyCode(val, 'babel');\n  },\n  html: function html() {\n    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return prettifyCode(val, 'html');\n  }\n};\nexport var formatCode = function formatCode(code, mode) {\n  if (!code) return '';\n  var formatter = formatters[mode];\n  return formatter(normalizeToString(code)) // remove eof line break, they are not helpful for snippets\n  .replace(/\\n$/, '');\n};","map":{"version":3,"sources":["/Users/skout/Desktop/Auditi/auditi_frontend/node_modules/@stardust-ui/docs-components/dist/es/CodeSnippet/formatCode.js"],"names":["_isObject","_prettier","babylon","html","typescript","prettier","default","prettierConfig","htmlWhitespaceSensitivity","printWidth","tabWidth","semi","singleQuote","trailingComma","plugins","normalizeToString","value","Array","isArray","join","JSON","stringify","prettifyCode","code","parser","formatted","format","Object","assign","replace","formatters","bash","val","arguments","length","undefined","json","js","jsx","formatCode","mode","formatter"],"mappings":"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","sourcesContent":["import _isObject from \"lodash/isObject\";\nimport * as _prettier from 'prettier/standalone';\nimport babylon from 'prettier/parser-babylon';\nimport html from 'prettier/parser-html';\nimport typescript from 'prettier/parser-typescript';\n// `prettier` is a CJS library, there are known issues with them:\n// https://github.com/rollup/rollup/issues/1267#issuecomment-446681320\nvar prettier = _prettier.default || _prettier;\nvar prettierConfig = {\n  htmlWhitespaceSensitivity: 'ignore',\n  printWidth: 100,\n  tabWidth: 2,\n  semi: false,\n  singleQuote: true,\n  trailingComma: 'all',\n  plugins: {\n    babylon: babylon,\n    html: html,\n    typescript: typescript\n  }\n};\n\nvar normalizeToString = function normalizeToString(value) {\n  if (Array.isArray(value)) return value.join('\\n');\n  return _isObject(value) ? JSON.stringify(value, null, 2) : value;\n};\n\nexport var prettifyCode = function prettifyCode(code, parser) {\n  var formatted = prettier.format(code, Object.assign({}, prettierConfig, {\n    // a narrower print width is more friendly to doc examples\n    parser: parser\n  }));\n  return formatted.replace(/^;</m, '<'); // remove beginning semi in JSX/HTML\n};\nvar formatters = {\n  bash: function bash() {\n    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return val.replace(/^/g, '$  ');\n  },\n  json: function json(val) {\n    return prettifyCode(val, 'json');\n  },\n  js: function js() {\n    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return prettifyCode(val, 'babel');\n  },\n  jsx: function jsx() {\n    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return prettifyCode(val, 'babel');\n  },\n  html: function html() {\n    var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    return prettifyCode(val, 'html');\n  }\n};\nexport var formatCode = function formatCode(code, mode) {\n  if (!code) return '';\n  var formatter = formatters[mode];\n  return formatter(normalizeToString(code)) // remove eof line break, they are not helpful for snippets\n  .replace(/\\n$/, '');\n};"]},"metadata":{},"sourceType":"module"}