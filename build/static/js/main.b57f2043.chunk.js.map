{"version":3,"sources":["actions/currentUser.js","App.js","serviceWorker.js","reducers/loginForm.js","store.js","reducers/users.js","reducers/currentUser.js","index.js"],"names":["setCurrentUser","user","type","login","credentials","dispatch","fetch","method","headers","body","JSON","stringify","then","resp","json","error","alert","catch","console","log","getCurrentUser","NavBar","lazy","App","this","props","fallback","React","Component","connect","Boolean","window","location","hostname","match","initialState","email","password","reducer","combineReducers","users","state","action","currentUser","loginForm","formData","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yHAAA,oEACO,IAAMA,EAAiB,SAAAC,GAC1B,MAAO,CACHC,KAAM,mBACND,SAYKE,EAAQ,SAAAC,GACjB,OAAO,SAAAC,GACH,OAAOC,MAAM,qCAAsC,CAC/CF,YAAa,UACbG,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUP,KAEpBQ,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAX,GACEA,EAAKc,MACLC,MAAMf,EAAKc,OAEXV,EAASL,EAAeC,OAG/BgB,MAAMC,QAAQC,OAIdC,EAAiB,WAC1B,OAAO,SAAAf,GACH,OAAOC,MAAM,gDAAiD,CAC1DF,YAAa,UACbG,OAAQ,MACRC,QAAS,CACL,eAAgB,sBAGnBI,MAAK,SAAAC,GAAI,OAAIA,EAAKC,UAClBF,MAAK,SAAAX,GACEA,EAAKc,MACLC,MAAMf,EAAKc,OAEXV,EAASL,EAAeC,OAG/BgB,MAAMC,QAAQC,Q,wNCjDrBE,EAASC,gBAAK,kBAAM,uDAKpBC,E,kLAGFC,KAAKC,MAAML,mB,+BAIX,OACI,kBAAC,WAAD,CAAUM,SAAY,4CACpB,kBAACL,EAAD,W,GATQM,IAAMC,WAoBTC,cAAQ,KAAM,CAACT,oBAAfS,CAAgCN,GCnB3BO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WClBAC,EAAe,CACjBC,MAAO,GACPC,SAAU,I,QCIRC,EAAUC,YAAgB,CAC5BC,MCPW,WAAyB,IAAxBC,EAAuB,uDAAf,GAAIC,EAAW,uCAG3B,OAFAA,EAAOxC,KAEAuC,GDKfE,YERW,WAA2B,IAA1BF,EAAyB,uDAAjB,KAAMC,EAAW,uCACrC,OAAQA,EAAOxC,MACX,IAAK,mBACD,OAAOwC,EAAOzC,KAClB,IAAK,qBACD,OAAO,KACX,QACI,OAAOwC,IFEfG,UDJW,WAAmC,IAAlCH,EAAiC,uDAAzBN,EAAcO,EAAW,uCAC7C,OAAQA,EAAOxC,MACX,IAAK,oBACD,OAAOwC,EAAOG,SAClB,QACI,OAAOJ,MCEbK,EAAkBf,OAAOgB,sCAAwCC,IAGxDC,EAFDC,YAAYZ,EAASQ,EAAgBK,YAAgBC,O,QGGnEC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJM,SAASC,eAAe,SL6GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/C,MAAK,SAAAgD,GACJA,EAAaC,gBAEd5C,OAAM,SAAAF,GACLG,QAAQH,MAAMA,EAAM+C,c","file":"static/js/main.b57f2043.chunk.js","sourcesContent":["//synchronous action creators\nexport const setCurrentUser = user => {\n    return {\n        type: \"SET_CURRENT_USER\",\n        user\n    }\n}\n\nexport const clearCurrentUser = () => {\n    return {\n        type: \"CLEAR_CURRENT_USER\"\n    }\n}\n\n\n//asynchronous action creators\nexport const login = credentials => {\n    return dispatch => {\n        return fetch(\"http://localhost:3000/api/v1/login\", {\n            credentials: \"include\",\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(credentials)\n        })\n            .then(resp => resp.json())\n            .then(user => {\n                if (user.error){\n                    alert(user.error)\n                } else {\n                    dispatch(setCurrentUser(user))\n                }\n            })\n            .catch(console.log)\n    }\n}\n\nexport const getCurrentUser = () => {\n    return dispatch => {\n        return fetch(\"http://localhost:3000/api/v1/get_current_user\", {\n            credentials: \"include\",\n            method: \"GET\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n        })\n            .then(resp => resp.json())\n            .then(user => {\n                if (user.error){\n                    alert(user.error)\n                } else {\n                    dispatch(setCurrentUser(user))\n                }\n            })\n            .catch(console.log)\n    }\n}\n\nexport const logout = () => {\n    return dispatch => {\n        dispatch(clearCurrentUser())\n        return fetch('http://localhost:3000/api/v1/logout', {\n            credentials: \"include\", \n            method: \"DELETE\"\n        })\n    }\n}","import React, { Suspense, lazy } from 'react';\nimport './App.css';\n// import { Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { getCurrentUser } from './actions/currentUser'\n\nconst NavBar = lazy(() => import('./NavBar'))\n// const Recorder = lazy(() => import('./containers/RecorderForm'))\n// const Login = lazy(() => import('./components/Login'))\n// const Home = lazy(() => import('./components/Home'))\n\nclass App extends React.Component{\n\n  componentDidMount(){\n    this.props.getCurrentUser()\n  }\n\n  render() {\n    return(\n        <Suspense fallback = {<div>Loading...</div>}>\n          <NavBar />\n          {/* <Switch> */}\n            {/* <Route exact path='/recorder' component= { Recorder } /> */}\n            {/* <Route exact path='/login' component = { Login } /> */}\n          {/* </Switch> */}\n        </Suspense>\n    )\n    }\n  \n}\n\nexport default connect(null, {getCurrentUser})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\n    email: \"\",\n    password: \"\"\n}\n\nexport default (state = initialState, action) => {\n    switch (action.type){\n        case \"UPDATE_LOGIN_FORM\":\n            return action.formData\n        default:\n            return state\n    }\n}","import { createStore, applyMiddleware, compose, combineReducers } from 'redux'\nimport users from './reducers/users.js'\nimport currentUser from './reducers/currentUser.js'\nimport loginForm from './reducers/loginForm.js'\nimport thunk from 'redux-thunk'\n\nconst reducer = combineReducers({\n    users,\n    currentUser,\n    loginForm\n  })\n  \nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst store = createStore(reducer, composeEnhancer(applyMiddleware(thunk)))\n\nexport default store","export default (state = [], action) => {\n    switch (action.type){\n        default:\n            return state\n    }\n}","export default (state = null, action) => {\n    switch (action.type){\n        case \"SET_CURRENT_USER\":\n            return action.user\n        case \"CLEAR_CURRENT_USER\":\n            return null\n        default:\n            return state\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import 'semantic-ui-css/semantic.min.css'\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport store from './store.js'\nimport { BrowserRouter as Router} from 'react-router-dom'\n// import logger from 'redux-logger'\n\n// import rootReducer from './rootReducer'\n\n\n// let store = createStore(composeEnhancers(applyMiddleware(...middleware)))\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}