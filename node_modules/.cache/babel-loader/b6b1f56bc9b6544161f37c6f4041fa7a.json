{"ast":null,"code":"Prism.languages.markup = {\n  'comment': /<!--[\\s\\S]*?-->/,\n  'prolog': /<\\?[\\s\\S]+?\\?>/,\n  'doctype': {\n    pattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:(?!<!--)[^\"'\\]]|\"[^\"]*\"|'[^']*'|<!--[\\s\\S]*?-->)*\\]\\s*)?>/i,\n    greedy: true\n  },\n  'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n  'tag': {\n    pattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/i,\n    greedy: true,\n    inside: {\n      'tag': {\n        pattern: /^<\\/?[^\\s>\\/]+/i,\n        inside: {\n          'punctuation': /^<\\/?/,\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      },\n      'attr-value': {\n        pattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/i,\n        inside: {\n          'punctuation': [/^=/, {\n            pattern: /^(\\s*)[\"']|[\"']$/,\n            lookbehind: true\n          }]\n        }\n      },\n      'punctuation': /\\/?>/,\n      'attr-name': {\n        pattern: /[^\\s>\\/]+/,\n        inside: {\n          'namespace': /^[^\\s>\\/:]+:/\n        }\n      }\n    }\n  },\n  'entity': /&#?[\\da-z]{1,8};/i\n};\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] = Prism.languages.markup['entity']; // Plugin to make entity title show the real entity, idea by Roman Komarov\n\nPrism.hooks.add('wrap', function (env) {\n  if (env.type === 'entity') {\n    env.attributes['title'] = env.content.replace(/&amp;/, '&');\n  }\n});\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n  /**\n   * Adds an inlined language to markup.\n   *\n   * An example of an inlined language is CSS with `<style>` tags.\n   *\n   * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n   * case insensitive.\n   * @param {string} lang The language key.\n   * @example\n   * addInlined('style', 'css');\n   */\n  value: function addInlined(tagName, lang) {\n    var includedCdataInside = {};\n    includedCdataInside['language-' + lang] = {\n      pattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n      lookbehind: true,\n      inside: Prism.languages[lang]\n    };\n    includedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n    var inside = {\n      'included-cdata': {\n        pattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n        inside: includedCdataInside\n      }\n    };\n    inside['language-' + lang] = {\n      pattern: /[\\s\\S]+/,\n      inside: Prism.languages[lang]\n    };\n    var def = {};\n    def[tagName] = {\n      pattern: RegExp(/(<__[\\s\\S]*?>)(?:<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\s*|[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () {\n        return tagName;\n      }), 'i'),\n      lookbehind: true,\n      greedy: true,\n      inside: inside\n    };\n    Prism.languages.insertBefore('markup', 'cdata', def);\n  }\n});\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;","map":{"version":3,"sources":["/Users/skout/Desktop/Auditi/auditi_frontend/node_modules/prismjs/components/prism-markup.js"],"names":["Prism","languages","markup","pattern","greedy","inside","lookbehind","hooks","add","env","type","attributes","content","replace","Object","defineProperty","tag","value","addInlined","tagName","lang","includedCdataInside","def","RegExp","source","insertBefore","xml","extend","html","mathml","svg"],"mappings":"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","sourcesContent":["Prism.languages.markup = {\n\t'comment': /<!--[\\s\\S]*?-->/,\n\t'prolog': /<\\?[\\s\\S]+?\\?>/,\n\t'doctype': {\n\t\tpattern: /<!DOCTYPE(?:[^>\"'[\\]]|\"[^\"]*\"|'[^']*')+(?:\\[(?:(?!<!--)[^\"'\\]]|\"[^\"]*\"|'[^']*'|<!--[\\s\\S]*?-->)*\\]\\s*)?>/i,\n\t\tgreedy: true\n\t},\n\t'cdata': /<!\\[CDATA\\[[\\s\\S]*?]]>/i,\n\t'tag': {\n\t\tpattern: /<\\/?(?!\\d)[^\\s>\\/=$<%]+(?:\\s(?:\\s*[^\\s>\\/=]+(?:\\s*=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+(?=[\\s>]))|(?=[\\s/>])))+)?\\s*\\/?>/i,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'tag': {\n\t\t\t\tpattern: /^<\\/?[^\\s>\\/]+/i,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': /^<\\/?/,\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t},\n\t\t\t'attr-value': {\n\t\t\t\tpattern: /=\\s*(?:\"[^\"]*\"|'[^']*'|[^\\s'\">=]+)/i,\n\t\t\t\tinside: {\n\t\t\t\t\t'punctuation': [\n\t\t\t\t\t\t/^=/,\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tpattern: /^(\\s*)[\"']|[\"']$/,\n\t\t\t\t\t\t\tlookbehind: true\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t},\n\t\t\t'punctuation': /\\/?>/,\n\t\t\t'attr-name': {\n\t\t\t\tpattern: /[^\\s>\\/]+/,\n\t\t\t\tinside: {\n\t\t\t\t\t'namespace': /^[^\\s>\\/:]+:/\n\t\t\t\t}\n\t\t\t}\n\n\t\t}\n\t},\n\t'entity': /&#?[\\da-z]{1,8};/i\n};\n\nPrism.languages.markup['tag'].inside['attr-value'].inside['entity'] =\n\tPrism.languages.markup['entity'];\n\n// Plugin to make entity title show the real entity, idea by Roman Komarov\nPrism.hooks.add('wrap', function(env) {\n\n\tif (env.type === 'entity') {\n\t\tenv.attributes['title'] = env.content.replace(/&amp;/, '&');\n\t}\n});\n\nObject.defineProperty(Prism.languages.markup.tag, 'addInlined', {\n\t/**\n\t * Adds an inlined language to markup.\n\t *\n\t * An example of an inlined language is CSS with `<style>` tags.\n\t *\n\t * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as\n\t * case insensitive.\n\t * @param {string} lang The language key.\n\t * @example\n\t * addInlined('style', 'css');\n\t */\n\tvalue: function addInlined(tagName, lang) {\n\t\tvar includedCdataInside = {};\n\t\tincludedCdataInside['language-' + lang] = {\n\t\t\tpattern: /(^<!\\[CDATA\\[)[\\s\\S]+?(?=\\]\\]>$)/i,\n\t\t\tlookbehind: true,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\t\tincludedCdataInside['cdata'] = /^<!\\[CDATA\\[|\\]\\]>$/i;\n\n\t\tvar inside = {\n\t\t\t'included-cdata': {\n\t\t\t\tpattern: /<!\\[CDATA\\[[\\s\\S]*?\\]\\]>/i,\n\t\t\t\tinside: includedCdataInside\n\t\t\t}\n\t\t};\n\t\tinside['language-' + lang] = {\n\t\t\tpattern: /[\\s\\S]+/,\n\t\t\tinside: Prism.languages[lang]\n\t\t};\n\n\t\tvar def = {};\n\t\tdef[tagName] = {\n\t\t\tpattern: RegExp(/(<__[\\s\\S]*?>)(?:<!\\[CDATA\\[[\\s\\S]*?\\]\\]>\\s*|[\\s\\S])*?(?=<\\/__>)/.source.replace(/__/g, function () { return tagName; }), 'i'),\n\t\t\tlookbehind: true,\n\t\t\tgreedy: true,\n\t\t\tinside: inside\n\t\t};\n\n\t\tPrism.languages.insertBefore('markup', 'cdata', def);\n\t}\n});\n\nPrism.languages.xml = Prism.languages.extend('markup', {});\nPrism.languages.html = Prism.languages.markup;\nPrism.languages.mathml = Prism.languages.markup;\nPrism.languages.svg = Prism.languages.markup;\n"]},"metadata":{},"sourceType":"script"}